# -*- coding: utf-8 -*-
"""Basic_SignalProcessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WD8ecN9vQit6vODvlUg37y0SY1M78Z8V
"""

import matplotlib.pyplot as plt
import numpy as np
import cv2

import warnings
warnings.filterwarnings('ignore')  #to remove all warnings

"""###Task 1:

1.Sine Wave
"""

#Generate Sine Wave of 2 Hz x(t)=A sin(wt)=Asin(2*pi*f*t)
t=np.arange(0,1,0.01)
f=2 #freq of 2 Hz
A=1 #amplitude
x= A*np.sin(2*np.pi*f*t)
#print(x)
y= A*np.cos(2*np.pi*f*t)

plt.plot(t,x,"r",t,y,"g")  #for smother sine wave,inc intervals
#red color for r
plt.xlabel("Time")
plt.ylabel("Amplitude")
plt.title("Sine and Cosine Wave")
plt.grid()

plt.subplot(1,2,1) #divides the plotting are in 1 row and 2 col part. last 1 is the 1st part of the division
plt.stem(t,x) #stem gives discrete values
plt.subplot(1,2,2)
plt.stem(t,y)

"""2. Unit Step"""

#discrete unit step: 1 for n>0 and 0 otherwise.
n=np.arange(-5,10,1)
u=[]
for i in n:
  if(i>0):
    u.append(1)
  else:
    u.append(0)
plt.stem(n,u)

"""3.Unit Ramp"""

##discrete unit step: n for n>0 and 0 otherwise.
n=np.arange(-5,10,1)
u=[]
for i in n:
  if(i>0):
    u.append(i)
  else:
    u.append(0)
plt.stem(n,u)

"""4. Unit Delta/Impulse Signal"""

# discrete impulse signal: 1 for n=0 and 0 otherwise.
n=np.arange(-5,10,1)
u=[]
for i in n:
  if(i==0):
    u.append(1)
  else:
    u.append(0)
plt.stem(n,u)

"""5. Exponential Signals"""

#discrete exponential: a^n for n>=0 ,for diff values of a.
n=np.arange(-10,10,1)
u=[]
u1=[]
u2=[]
u3=[]
for i in n:
    a=-0.5
    u.append(a**i)
    a=-1.5
    u1.append(a**i)
    a=1.5
    u2.append(a**i)
    a=0.5
    u3.append(a**i)

plt.subplot(2,2,1)
plt.stem(n,u)
plt.subplot(2,2,2)
plt.stem(n,u1)
plt.subplot(2,2,3)
plt.stem(n,u2)
plt.subplot(2,2,4)
plt.stem(n,u3)

"""###Task 2:"""

#continuous signal:
t=np.arange(-10,10,1)
f=2 #freq of 2 Hz
A=1 #amplitude
x= A*np.sin(2*np.pi*f*t)
plt.subplot(1,3,1)
plt.plot(t,x)
plt.title("Continuos")
#discrete signal:
plt.subplot(1,3,2)
plt.stem(t,x)
plt.title("Discrete")
#Digital signal:
np.round(x,0) 
plt.subplot(1,3,3)
plt.stem(t,x)
plt.title("Digital")

t=np.arange(-10.5,10.5,1)
f=2 #freq of 2 Hz
A=1 #amplitude
x= A*np.sin(2*np.pi*f*t)
np.round(x,0)  #rounds the numbers to nearest integers.
plt.subplot(1,3,3)
plt.stem(t,x)
plt.title("Digital")

"""###Task 3:

Time Shifting
"""

#y(n)=x(n+2)
n=np.arange(-10,10,1)
u=[0,0,0,1,2,1,1,2,2,1,2,2,1,1,2,1,2,1,2,1]
u1=np.zeros(20)
plt.subplot(1,2,1)
plt.stem(n,u)
plt.title("Original Signal")

for i in n:
    if((u[i]==0)):
      continue
    else:
      u1[i-2]=u[i]
  
plt.subplot(1,2,2)
plt.title("Signal after Shifting")
plt.stem(n,u1)

"""Time Reversal"""

#y(n)=x(-n)
n=np.arange(-10,10,1)
u2=[1,1,1,1,2,1,1,2,2,1,2,2,1,0,0,1,2,1,2,1]
u3=np.zeros(20)
plt.subplot(1,2,1)
plt.stem(n,u2)
plt.title("Original Signal")

for i in n:
      u3[-i-1]=u2[i]  #since n goes from -10 to 9 only,when we reverse it will go from -9 to 10. Hence, shifted the signal by 1 to left.
  
plt.subplot(1,2,2)
plt.title("Signal after Reversing")
plt.stem(n,u3)

"""Time Scaling"""

#y(n)=x(n/2)
n=np.arange(-10,10,1)
u=[0,0,0,1,2,1,1,2,2,1,2,2,1,1,2,1,2,1,2,1]
u1=np.zeros(20)
plt.subplot(1,2,1)
plt.stem(n,u)
plt.title("Original Signal")

for i in n:
  if 2*i >= -10 and 2*i < 10:
      u1[2*i + 10]=u[i + 10]  #+10 to take the position of 0 acc to the timeline in the array.
  
  
  
plt.subplot(1,2,2)
plt.title("Signal after Scaling")
plt.stem(n,u1)

"""##Conclusion:
Task 1: Plotted different types of signals:sine wave,unit step,unit ramp,unit impusle and exponential wave using matplotlib library. Analysed them and understood the differences between them.

Task 2: Plotted a continuous,discrete and digital(discrete in time and quantisized in amplitude) sine wave and understood difference between them.

Task 3: Performed operations on signals:shifting,reversing and scaling and plotted the original vs the altered signal to know the respective change.
"""

! jupyter nbconvert --to html /content/I078_SIP_Prac1.ipynb