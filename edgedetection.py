# -*- coding: utf-8 -*-
"""EdgeDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F4GEC4nun47BQqK_711vUTPMB5Z2QhCc
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

img= cv2.imread("building.tif",0) # Read the image

plt.imshow(img, cmap="gray",vmin=0,vmax=255)
plt.title("Ã–riginal image")

r,c=img.shape

"""####Horizontal Edge"""

hmask=np.array([[-1,-2,-1],[0,0,0],[1,2,1]])
himg=np.zeros([r,c])
for i in range(1,r-1):
    for j in range(1,c-1):
        temp= np.multiply(img[i-1:i+2,j-1:j+2],hmask)  #applying mask and taking average of the value to find its final val in the resulting img
        sum= np.sum(temp)
        himg[i,j]=sum
plt.imshow(himg, cmap="gray",vmin=0,vmax=255)
plt.title("Horizontal Edged")

"""####Vertical Edge"""

vmask=np.array([[-1,0,1],[-2,0,2],[-1,0,1]])
vimg=np.zeros([r,c])
for i in range(1,r-1):
    for j in range(1,c-1):
        temp= np.multiply(img[i-1:i+2,j-1:j+2],vmask)
        sum= np.sum(temp)
        vimg[i,j]=sum
plt.imshow(vimg, cmap="gray",vmin=0,vmax=255)
plt.title("Vertical Edged")

"""####Diagonal Edge"""

dmask=np.array([[0,1,2],[-1,0,1],[-2,-1,0]])
dimg=np.zeros([r,c])
for i in range(1,r-1):
    for j in range(1,c-1):
        temp= np.multiply(img[i-1:i+2,j-1:j+2],dmask)
        sum= np.sum(temp)
        dimg[i,j]=sum
plt.imshow(dimg, cmap="gray",vmin=0,vmax=255)
plt.title("Diagonal Edged")

#Addition of all three
img1=himg+vimg+dimg
plt.imshow(img1, cmap="gray",vmin=0,vmax=255)

"""####Applying Edge Detection on Blurred Image"""

#Applying LPF on the image
img_blur= np.zeros([r,c], dtype=int)
b= int(input("Enter size of the mask: "))
a=b//2

for i in range(1,r-a):
    for j in range(1,c-a):
        temp= img[i-a:i+a,j-a:j+a] 
        
        constant= np.sum(temp)
        img_blur[i,j]= constant//b**2

#Variable Mask blurred image
plt.imshow(img_blur,cmap="gray" )

hmask=np.array([[-1,-2,-1],[0,0,0],[1,2,1]])
himg_blur=np.zeros([r,c])
for i in range(1,r-1):
    for j in range(1,c-1):
        temp= np.multiply(img_blur[i-1:i+2,j-1:j+2],hmask)
        sum= np.sum(temp)
        himg_blur[i,j]=sum
plt.imshow(himg_blur, cmap="gray",vmin=0,vmax=255)
plt.title("Horizontal Edged")

vmask=np.array([[-1,0,1],[-2,0,2],[-1,0,1]])
vimg_blur=np.zeros([r,c])
for i in range(1,r-1):
    for j in range(1,c-1):
        temp= np.multiply(img_blur[i-1:i+2,j-1:j+2],vmask)
        sum= np.sum(temp)
        vimg_blur[i,j]=sum
plt.imshow(vimg_blur, cmap="gray",vmin=0,vmax=255)
plt.title("Vertical Edged")

dmask=np.array([[0,1,2],[-1,0,1],[-2,-1,0]])
dimg_blur=np.zeros([r,c])
for i in range(1,r-1):
    for j in range(1,c-1):
        temp= np.multiply(img_blur[i-1:i+2,j-1:j+2],dmask)
        sum= np.sum(temp)
        dimg_blur[i,j]=sum
plt.imshow(dimg_blur, cmap="gray",vmin=0,vmax=255)
plt.title("Diagonal Edged")

#Addition of all three
img2=himg_blur+vimg_blur+dimg_blur
plt.imshow(img2, cmap="gray",vmin=0,vmax=255)

! jupyter nbconvert --to html I078_SIP_Prac7.ipynb

"""###Conclusion:
Applied edge detection:horizontal,vertical and diagonal on an image.Edge Detection basically helps in finding boundaries of objects within the image. So,horizontal edge dtection will find out horizontal edges and similarly others. Also,applied all three together i.e addition of all edge detected images.

Also,applied low pass filter on the same image and then applied edge detection. The application of a 3*3 low pass filter on edge detection was that the edges appeared more clearer and smoother than the original one.
"""