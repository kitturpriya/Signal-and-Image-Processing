# -*- coding: utf-8 -*-
"""Erosion_and_Dilation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-yO7E67oTEBJw-7y6_wpdyVN3OSEfUJZ
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

img= cv2.imread("/content/Fig0905(a)(wirebond-mask).tif",0) # Read the image

plt.imshow(img, cmap="gray",vmin=0,vmax=255)
plt.title("Öriginal image")

#Erosion function without use of built in function
def erosion(img):
  s=int(input("Enter size of mask:"))
  SE=np.ones((s,s), dtype=np.uint8)
  const=(s-1)//2
  r,c=img.shape #storing rows and col of the image
  img_erode=np.zeros((r,c), dtype= np.uint8)
  for i in range(const, r-const):
   for j in range(const,c-const):
    temp= img[i-const:i+const+1, j-const:j+const+1]
    product= temp*SE
    img_erode[i,j]= np.min(product)
  return img_erode

#Image before and after erosion
plt.subplot(1,2,1)
plt.imshow(img, cmap="gray")
plt.title("Original")
plt.subplot(1,2,2)
plt.imshow(erosion(img), cmap="gray")
plt.title("Eroded with SE ")

img1= cv2.imread("/content/Fig0907(a)(text_gaps_1_and_2_pixels).tif",0) # Read the image

plt.imshow(img1, cmap="gray",vmin=0,vmax=255)
plt.title("Öriginal image")

#Dilution function without use of built in function
def dilation(img1):
 r1,c1=img1.shape
 SED= np.array([[0,1,0], [1,1,1], [0,1,0]])
 const1= 1
 img_dilute=np.zeros((r1,c1), dtype= np.uint8)
 for i in range(const1, r1-const1):
  for j in range(const1,c1-const1):
    temp= img1[i-const1:i+const1+1, j-const1:j+const1+1]
    product= temp*SED
    img_dilute[i,j]= np.max(product)
 return img_dilute

#Image before and after dilution
plt.subplot(1,2,1)
plt.imshow(img1, cmap="gray")
plt.title("Original")
plt.subplot(1,2,2)
plt.imshow(dilation(img1), cmap="gray")
plt.title("Diluted Image")

#Dilution using inversion logic
def dilate(img):
  invertedimg = (255-img) #black becomes white n vice versa
  eroded_invertedimg = erosion(invertedimg) #perform erosion on the inverted image
  newdilated = (255 - eroded_invertedimg ) #re-invert to get the dilated image of the original
  return newdilated

#Displaying the Dilated Image
fig=plt.figure(figsize=(10,10))
plt.subplot(1,2,1)
plt.imshow(img1, cmap="gray")
plt.subplot(1,2,2)
plt.imshow(dilate(img1),cmap= "gray")

! jupyter nbconvert --to html /content/I078_SIP_Prac8.ipynb

"""###Conclusion
Performed Erosion and Dilation on a given image. Erosion basically removes all the bright spots while Dilation does the opposite.

Performed inversion on the image and applied erosion to it. The reinversion of this obtained image gives the dilated version of the original image. This is because when we invert the image black pixels turn white and vice versa. Applying the concept of erosion on it and the re inverting it will yield the desired result.
"""